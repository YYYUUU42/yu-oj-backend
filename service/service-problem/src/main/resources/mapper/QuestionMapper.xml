<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yu.problem.mapper.QuestionMapper">

    <resultMap id="BaseResultMap" type="com.yu.model.entity.Question">
            <id property="id" column="id" jdbcType="BIGINT"/>
            <result property="userId" column="userId" jdbcType="BIGINT"/>
            <result property="title" column="title" jdbcType="VARCHAR"/>
            <result property="content" column="content" jdbcType="VARCHAR"/>
            <result property="tags" column="tags" jdbcType="VARCHAR"/>
            <result property="answer" column="answer" jdbcType="VARCHAR"/>
            <result property="judgeCase" column="judgeCase" jdbcType="VARCHAR"/>
            <result property="difficulty" column="difficulty" jdbcType="VARCHAR"/>
            <result property="judgeConfig" column="judgeConfig" jdbcType="VARCHAR"/>
            <result property="submitNum" column="submitNum" jdbcType="INTEGER"/>
            <result property="acceptedNum" column="acceptedNum" jdbcType="INTEGER"/>
            <result property="thumbNum" column="thumbNum" jdbcType="INTEGER"/>
            <result property="favourNum" column="favourNum" jdbcType="INTEGER"/>
            <result property="createTime" column="createTime" jdbcType="TIMESTAMP"/>
            <result property="updateTime" column="updateTime" jdbcType="TIMESTAMP"/>
            <result property="isDelete" column="isDelete" jdbcType="TINYINT"/>
    </resultMap>

    <sql id="Base_Column_List">
        id,userId,title,
        content,tags,answer,
        judgeCase,judgeConfig,submitNum,
        acceptedNum,thumbNum,favourNum,
        createTime,updateTime,isDelete
    </sql>

    <select id="getRandomFailedProblemByUser" resultType="com.yu.model.entity.Question">
        SELECT *
        FROM question
        WHERE id NOT IN
              (select distinct questionId from question_submit where submitState = #{status} and userId = #{userId})
        ORDER BY RAND() LIMIT #{num};
    </select>

    <select id="getDifficultyPassList" resultType="java.lang.String">
        select p.difficulty
        from question p
                 LEFT JOIN question_submit ps on p.id = ps.questionId
        where ps.userId = #{userId}
          and ps.submitState = #{status}
    </select>

    <select id="getProblemCompleteCount" resultType="com.yu.model.vo.ProblemCompleteCountVo">
        SELECT p.id as problemId, COUNT(p.id) AS completionCount, p.difficulty
        FROM question_submit ps
                 LEFT JOIN question p ON p.id = ps.questionId
        WHERE ps.submitState = #{status}
        GROUP BY ps.questionId, p.difficulty;
    </select>
</mapper>
